# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ../gtest-1.6.0

# Where to find user code.
USER_DIR = ../gtest-1.6.0/samples

# Flags passed to the preprocessor.
CPPFLAGS += -I$(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = Input_unittest OutputPin_unittest ShiftRegister_unittest State_unittest  Animation_unittest Song_unittest

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TESTS)
	./Input_unittest
	./OutputPin_unittest
	./ShiftRegister_unittest
	./State_unittest
	./Animation_unittest
	./Song_unittest
clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Build the tests 

Arduino.o : Arduino.c Arduino.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c Arduino.c

Input.o : Input.cc Input.h Arduino.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c Input.cc

InputManager.o : InputManager.cc InputManager.h Arduino.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c InputManager.cc

AnalogInput.o : AnalogInput.cc AnalogInput.h Input.cc Input.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c AnalogInput.cc

TimerInput.o : TimerInput.cc TimerInput.h Input.cc Input.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c TimerInput.cc

DigitalInput.o : DigitalInput.cc DigitalInput.h Input.cc Input.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c DigitalInput.cc

Input_unittest.o : Input_unittest.cc 
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c Input_unittest.cc

Input_unittest : Input.o AnalogInput.o DigitalInput.o TimerInput.o Input_unittest.o gtest_main.a Arduino.o InputManager.o State.o LaunchState.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

OutputPin.o : OutputPin.cc OutputPin.h Arduino.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c OutputPin.cc

OutputPin_unittest.o : OutputPin_unittest.cc 
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c OutputPin_unittest.cc

OutputPin_unittest : OutputPin.o OutputPin_unittest.o gtest_main.a Arduino.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

ShiftRegister.o : ShiftRegister.cc ShiftRegister.h Arduino.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ShiftRegister.cc

ShiftRegister_unittest.o : ShiftRegister_unittest.cc 
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ShiftRegister_unittest.cc

ShiftRegister_unittest : ShiftRegister.o ShiftRegister_unittest.o gtest_main.a Arduino.o OutputPin.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

LaunchState.o : LaunchState.cc LaunchState.h State.cc State.h MCState_t.h MCEvent_t.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c LaunchState.cc

State.o : State.cc State.h MCState_t.h MCEvent_t.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c State.cc

State_unittest.o : State_unittest.cc 
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c State_unittest.cc

State_unittest : LaunchState.o State.o State_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

Animation.o : Animation.cc Animation.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c Animation.cc

Animation_unittest.o : Animation_unittest.cc Animation.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c Animation_unittest.cc

Animation_unittest : Animation.o Animation_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

Song.o : Song.cc Song.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c Song.cc

Song_unittest.o : Song_unittest.cc Song.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c Song_unittest.cc

Song_unittest : Song.o Song_unittest.o gtest_main.a Animation.o Arduino.o OutputPin.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

sample1.o : $(USER_DIR)/sample1.cc $(USER_DIR)/sample1.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/sample1.cc

sample1_unittest.o : $(USER_DIR)/sample1_unittest.cc \
                     $(USER_DIR)/sample1.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/sample1_unittest.cc

sample1_unittest : sample1.o sample1_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

